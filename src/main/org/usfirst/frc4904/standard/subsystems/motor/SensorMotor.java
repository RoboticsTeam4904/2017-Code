package org.usfirst.frc4904.standard.subsystems.motor;


import org.usfirst.frc4904.standard.LogKitten;
import org.usfirst.frc4904.standard.custom.motioncontrollers.MotionController;
import org.usfirst.frc4904.standard.custom.sensors.InvalidSensorException;
import org.usfirst.frc4904.standard.subsystems.motor.speedmodifiers.IdentityModifier;
import org.usfirst.frc4904.standard.subsystems.motor.speedmodifiers.SpeedModifier;
import edu.wpi.first.wpilibj.SpeedController;

public abstract class SensorMotor extends Motor {
	protected final MotionController motionController;
	private boolean isMotionControlEnabled;

	public SensorMotor(String name, boolean inverted, SpeedModifier speedModifier, MotionController motionController,
		SpeedController... motors) {
		super(name, inverted, speedModifier, motors);
		this.motionController = motionController;
	}

	public SensorMotor(String name, boolean isInverted, MotionController motionController, SpeedController... motors) {
		this(name, isInverted, new IdentityModifier(), motionController, motors);
	}

	public SensorMotor(String name, SpeedModifier speedModifier, MotionController motionController, SpeedController... motors) {
		this(name, false, speedModifier, motionController, motors);
	}

	public SensorMotor(String name, MotionController motionController, SpeedController... motors) {
		this(name, false, new IdentityModifier(), motionController, motors);
	}

	public SensorMotor(boolean isInverted, SpeedModifier speedModifier, MotionController motionController,
		SpeedController... motors) {
		this("SensorMotor", isInverted, speedModifier, motionController, motors);
	}

	public SensorMotor(boolean isInverted, MotionController motionController, SpeedController... motors) {
		this("SensorMotor", isInverted, motionController, motors);
	}

	public SensorMotor(SpeedModifier speedModifier, MotionController motionController, SpeedController... motors) {
		this("SensorMotor", speedModifier, motionController, motors);
	}

	public SensorMotor(MotionController motionController, SpeedController... motors) {
		this("SensorMotor", motionController, motors);
	}

	public void reset() throws InvalidSensorException {
		motionController.reset();
	}

	public void setInputRange(double minimum, double maximum) {
		motionController.setInputRange(minimum, maximum);
	}

	public void enableMotionController() {
		motionController.setOutput(this);
		motionController.enable();
	}

	public void disableMotionController() {
		motionController.disable();
	}

	/**
	 * Starts overriding the controller.
	 * The controller will disable and not be allowed
	 * to enable until the override is turned off.
	 * 
	 * @see MotionController#startOverriding()
	 */
	public void startOverridingMotionController() {
		motionController.startOverriding();
	}

	/**
	 * Stops overriding the motion controller.
	 * Enabling the controller will now be allowed.
	 * 
	 * @see MotionController#stopOverriding()
	 */
	public void stopOverridingMotionController() {
		motionController.stopOverriding();
	}

	/**
	 * Has the motion controller been overridden?
	 * 
	 * @see MotionController#isOverridden()
	 */
	public boolean isMotorControllerOverridden() {
		return motionController.isOverridden();
	}

	/**
	 * Returns any exceptions generated by the underlying
	 * motion controller. Null under normal use.
	 *
	 * @return exceptions from the motion controller
	 */
	public Exception checkSensorException() {
		return motionController.checkException();
	}

	/**
	 * Set the position of a sensor motor
	 *
	 * @param position
	 * @throws InvalidSensorException
	 */
	public void setPositionSafely(double position) throws InvalidSensorException {
		motionController.setSetpoint(position);
		motionController.enable();
		double speed = motionController.getSafely();
		LogKitten.v(getName() + " set to position " + position + " at speed " + speed);
		super.set(speed);
	}

	/**
	 * Set the position of a sensor motor
	 *
	 * @param position
	 * @warning this does not indicate sensor failure
	 */
	public void setPosition(double position) {
		motionController.setSetpoint(position);
		motionController.enable();
		double speed = motionController.get();
		LogKitten.v(getName() + " set to position " + position + " at speed " + speed);
		super.set(speed);
	}

	public boolean onTarget() {
		return motionController.onTarget();
	}
}
